generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SuperAdmin {
  id       String  @id @default(uuid())
  name     String  @unique
  fcmToken String?
  password String
}

model BusinessUser {
  id             String        @id @unique @default(uuid())
  name           String
  businessName   String
  mobile         String        @unique
  email          String?       @unique
  password       String
  slug           String        @unique
  address        String?
  verified       Boolean
  approved       Boolean
  employeeLength Int           @default(20)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  type           String?
  tickets        Appointment[]
  employees      Employee[]
  services       Service[]
  customers      Customer[]    @relation("BusinessUserToUser")
  fcmToken       String?
  Category       Category[]
  Transaction    Transaction[]
  Website        Website[]

  @@index([mobile, name])
}

model Website {
  id             String       @id @default(uuid())
  live           Boolean
  logo           String
  heroImage      String
  title          String
  subtitle       String
  slug           String
  mobile         String
  whatsapp       String
  city           String?
  state          String?
  country        Json?
  address        String?
  pincode        String?
  facebook       String?
  instagram      String?
  youtube        String?
  maps           String?
  weekdays       Json?
  breakTimeEnd   String?
  breakTimeStart String?
  endTime        String?
  startTime      String?
  email          String       @unique
  slots          Json?
  businessUserId String       @unique
  businessName   String?
  businessUser   BusinessUser @relation(fields: [businessUserId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Employee {
  id             String        @id @default(uuid())
  name           String
  avatar         String
  mobile         String        @unique
  designation    String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  businessUserId String?
  password       String?
  appointments   Appointment[]
  businessUser   BusinessUser? @relation(fields: [businessUserId], references: [id])
  customers      Customer[]
  fcmToken       String?

  @@index([mobile, name])
}

model Customer {
  id            String         @id @default(uuid())
  name          String
  mobile        String         @unique
  dob           DateTime?
  sex           String?
  verified      Boolean
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  employeeId    String?
  appointments  Appointment[]
  employess     Employee?      @relation(fields: [employeeId], references: [id])
  BusinessUsers BusinessUser[] @relation("BusinessUserToUser")
  fcmToken      String?

  @@index([mobile, name])
}

model Category {
  id             String       @id @unique @default(uuid())
  name           String
  businessUserId String
  BusinessUser   BusinessUser @relation(fields: [businessUserId], references: [id])
  services       Service[]
}

model Service {
  id             String        @id @unique @default(uuid())
  name           String
  businessUserId String
  price          Int
  gender         String
  duration       Json
  BusinessUser   BusinessUser  @relation(fields: [businessUserId], references: [id])
  Appointments   Appointment[]
  Category       Category      @relation(fields: [categoryId], references: [id])
  categoryId     String
}

model Appointment {
  id                  String       @id @default(uuid())
  customerDisplayName String
  customerId          String
  businessUserId      String
  status              String
  date                String
  ticketId            Int          @unique @default(autoincrement())
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  slot                Json
  employeeId          String
  serviceId           String
  service             Service      @relation(fields: [serviceId], references: [id])
  BusinessUser        BusinessUser @relation(fields: [businessUserId], references: [id])
  employee            Employee     @relation(fields: [employeeId], references: [id])
  User                Customer     @relation(fields: [customerId], references: [id])
}

model Transaction {
  id             String       @id @default(uuid())
  price          String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  businessUserId String
  businessUser   BusinessUser @relation(fields: [businessUserId], references: [id])
  planId         String
  plan           Plan         @relation(fields: [planId], references: [id])
}

model Plan {
  id          String        @id @default(uuid())
  name        String
  price       String
  days        String
  features    Json
  Transaction Transaction[]
}
